# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from erasor/node.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class node(genpy.Message):
  _md5sum = "0570ad233487d687f47841824e86c07e"
  _type = "erasor/node"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
geometry_msgs/Pose odom
float64[36] odomCov
sensor_msgs/PointCloud2 lidar
geometry_msgs/Pose lidarOdom
sensor_msgs/CompressedImage image
sensor_msgs/NavSatFix g
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: sensor_msgs/CompressedImage
# This message contains a compressed image

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image

string format        # Specifies the format of the data
                     #   Acceptable values:
                     #     jpeg, png
uint8[] data         # Compressed image buffer

================================================================================
MSG: sensor_msgs/NavSatFix
# Navigation Satellite fix for any Global Navigation Satellite System
#
# Specified using the WGS 84 reference ellipsoid

# header.stamp specifies the ROS time for this measurement (the
#        corresponding satellite time may be reported using the
#        sensor_msgs/TimeReference message).
#
# header.frame_id is the frame of reference reported by the satellite
#        receiver, usually the location of the antenna.  This is a
#        Euclidean frame relative to the vehicle, not a reference
#        ellipsoid.
Header header

# satellite fix status information
NavSatStatus status

# Latitude [degrees]. Positive is north of equator; negative is south.
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is west.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid
# (quiet NaN if no altitude is available).
float64 altitude

# Position covariance [m^2] defined relative to a tangential plane
# through the reported position. The components are East, North, and
# Up (ENU), in row-major order.
#
# Beware: this coordinate system exhibits singularities at the poles.

float64[9] position_covariance

# If the covariance of the fix is known, fill it in completely. If the
# GPS receiver provides the variance of each measurement, put them
# along the diagonal. If only Dilution of Precision is available,
# estimate an approximate covariance from that.

uint8 COVARIANCE_TYPE_UNKNOWN = 0
uint8 COVARIANCE_TYPE_APPROXIMATED = 1
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2
uint8 COVARIANCE_TYPE_KNOWN = 3

uint8 position_covariance_type

================================================================================
MSG: sensor_msgs/NavSatStatus
# Navigation Satellite fix status for any Global Navigation Satellite System

# Whether to output an augmented fix is determined by both the fix
# type and the last time differential corrections were received.  A
# fix is valid when status >= STATUS_FIX.

int8 STATUS_NO_FIX =  -1        # unable to fix position
int8 STATUS_FIX =      0        # unaugmented fix
int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation
int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation

int8 status

# Bits defining which Global Navigation Satellite System signals were
# used by the receiver.

uint16 SERVICE_GPS =     1
uint16 SERVICE_GLONASS = 2
uint16 SERVICE_COMPASS = 4      # includes BeiDou.
uint16 SERVICE_GALILEO = 8

uint16 service
"""
  __slots__ = ['header','odom','odomCov','lidar','lidarOdom','image','g']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','float64[36]','sensor_msgs/PointCloud2','geometry_msgs/Pose','sensor_msgs/CompressedImage','sensor_msgs/NavSatFix']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,odom,odomCov,lidar,lidarOdom,image,g

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(node, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.odom is None:
        self.odom = geometry_msgs.msg.Pose()
      if self.odomCov is None:
        self.odomCov = [0.] * 36
      if self.lidar is None:
        self.lidar = sensor_msgs.msg.PointCloud2()
      if self.lidarOdom is None:
        self.lidarOdom = geometry_msgs.msg.Pose()
      if self.image is None:
        self.image = sensor_msgs.msg.CompressedImage()
      if self.g is None:
        self.g = sensor_msgs.msg.NavSatFix()
    else:
      self.header = std_msgs.msg.Header()
      self.odom = geometry_msgs.msg.Pose()
      self.odomCov = [0.] * 36
      self.lidar = sensor_msgs.msg.PointCloud2()
      self.lidarOdom = geometry_msgs.msg.Pose()
      self.image = sensor_msgs.msg.CompressedImage()
      self.g = sensor_msgs.msg.NavSatFix()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w))
      buff.write(_get_struct_36d().pack(*self.odomCov))
      _x = self
      buff.write(_get_struct_3I().pack(_x.lidar.header.seq, _x.lidar.header.stamp.secs, _x.lidar.header.stamp.nsecs))
      _x = self.lidar.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.lidar.height, _x.lidar.width))
      length = len(self.lidar.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidar.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.lidar.is_bigendian, _x.lidar.point_step, _x.lidar.row_step))
      _x = self.lidar.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B7d3I().pack(_x.lidar.is_dense, _x.lidarOdom.position.x, _x.lidarOdom.position.y, _x.lidarOdom.position.z, _x.lidarOdom.orientation.x, _x.lidarOdom.orientation.y, _x.lidarOdom.orientation.z, _x.lidarOdom.orientation.w, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.image.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.g.header.seq, _x.g.header.stamp.secs, _x.g.header.stamp.nsecs))
      _x = self.g.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bH3d().pack(_x.g.status.status, _x.g.status.service, _x.g.latitude, _x.g.longitude, _x.g.altitude))
      buff.write(_get_struct_9d().pack(*self.g.position_covariance))
      _x = self.g.position_covariance_type
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.odom is None:
        self.odom = geometry_msgs.msg.Pose()
      if self.lidar is None:
        self.lidar = sensor_msgs.msg.PointCloud2()
      if self.lidarOdom is None:
        self.lidarOdom = geometry_msgs.msg.Pose()
      if self.image is None:
        self.image = sensor_msgs.msg.CompressedImage()
      if self.g is None:
        self.g = sensor_msgs.msg.NavSatFix()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odomCov = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.lidar.header.seq, _x.lidar.header.stamp.secs, _x.lidar.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.lidar.height, _x.lidar.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidar.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.lidar.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.lidar.is_bigendian, _x.lidar.point_step, _x.lidar.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.lidar.is_bigendian = bool(self.lidar.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.lidar.data = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.lidar.is_dense, _x.lidarOdom.position.x, _x.lidarOdom.position.y, _x.lidarOdom.position.z, _x.lidarOdom.orientation.x, _x.lidarOdom.orientation.y, _x.lidarOdom.orientation.z, _x.lidarOdom.orientation.w, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_B7d3I().unpack(str[start:end])
      self.lidar.is_dense = bool(self.lidar.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.g.header.seq, _x.g.header.stamp.secs, _x.g.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.g.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.g.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.g.status.status, _x.g.status.service, _x.g.latitude, _x.g.longitude, _x.g.altitude,) = _get_struct_bH3d().unpack(str[start:end])
      start = end
      end += 72
      self.g.position_covariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 1
      (self.g.position_covariance_type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w))
      buff.write(self.odomCov.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.lidar.header.seq, _x.lidar.header.stamp.secs, _x.lidar.header.stamp.nsecs))
      _x = self.lidar.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.lidar.height, _x.lidar.width))
      length = len(self.lidar.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidar.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.lidar.is_bigendian, _x.lidar.point_step, _x.lidar.row_step))
      _x = self.lidar.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B7d3I().pack(_x.lidar.is_dense, _x.lidarOdom.position.x, _x.lidarOdom.position.y, _x.lidarOdom.position.z, _x.lidarOdom.orientation.x, _x.lidarOdom.orientation.y, _x.lidarOdom.orientation.z, _x.lidarOdom.orientation.w, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.image.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.g.header.seq, _x.g.header.stamp.secs, _x.g.header.stamp.nsecs))
      _x = self.g.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bH3d().pack(_x.g.status.status, _x.g.status.service, _x.g.latitude, _x.g.longitude, _x.g.altitude))
      buff.write(self.g.position_covariance.tostring())
      _x = self.g.position_covariance_type
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.odom is None:
        self.odom = geometry_msgs.msg.Pose()
      if self.lidar is None:
        self.lidar = sensor_msgs.msg.PointCloud2()
      if self.lidarOdom is None:
        self.lidarOdom = geometry_msgs.msg.Pose()
      if self.image is None:
        self.image = sensor_msgs.msg.CompressedImage()
      if self.g is None:
        self.g = sensor_msgs.msg.NavSatFix()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odom.position.x, _x.odom.position.y, _x.odom.position.z, _x.odom.orientation.x, _x.odom.orientation.y, _x.odom.orientation.z, _x.odom.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odomCov = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 12
      (_x.lidar.header.seq, _x.lidar.header.stamp.secs, _x.lidar.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidar.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidar.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.lidar.height, _x.lidar.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidar.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.lidar.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.lidar.is_bigendian, _x.lidar.point_step, _x.lidar.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.lidar.is_bigendian = bool(self.lidar.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.lidar.data = str[start:end]
      _x = self
      start = end
      end += 69
      (_x.lidar.is_dense, _x.lidarOdom.position.x, _x.lidarOdom.position.y, _x.lidarOdom.position.z, _x.lidarOdom.orientation.x, _x.lidarOdom.orientation.y, _x.lidarOdom.orientation.z, _x.lidarOdom.orientation.w, _x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_B7d3I().unpack(str[start:end])
      self.lidar.is_dense = bool(self.lidar.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.g.header.seq, _x.g.header.stamp.secs, _x.g.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.g.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.g.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.g.status.status, _x.g.status.service, _x.g.latitude, _x.g.longitude, _x.g.altitude,) = _get_struct_bH3d().unpack(str[start:end])
      start = end
      end += 72
      self.g.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 1
      (self.g.position_covariance_type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_B7d3I = None
def _get_struct_B7d3I():
    global _struct_B7d3I
    if _struct_B7d3I is None:
        _struct_B7d3I = struct.Struct("<B7d3I")
    return _struct_B7d3I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_bH3d = None
def _get_struct_bH3d():
    global _struct_bH3d
    if _struct_bH3d is None:
        _struct_bH3d = struct.Struct("<bH3d")
    return _struct_bH3d
